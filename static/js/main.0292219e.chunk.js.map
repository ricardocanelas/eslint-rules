{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["converter","showdown","Converter","App","React","useState","data1","setData1","data2","setData2","loading1","setLoading1","loading2","setLoading2","useEffect","fetch","then","response","console","log","text","data","makeHtml","parse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAKMA,EAAY,IAAIC,IAASC,UA+FhBC,MA7Ff,WAAgB,IAAD,EACaC,IAAMC,SAAS,MAD5B,mBACNC,EADM,KACCC,EADD,OAEaH,IAAMC,SAAS,MAF5B,mBAENG,EAFM,KAECC,EAFD,OAGmBL,IAAMC,UAAS,GAHlC,mBAGNK,EAHM,KAGIC,EAHJ,OAImBP,IAAMC,UAAS,GAJlC,mBAINO,EAJM,KAIIC,EAJJ,KA2Bb,OArBAT,IAAMU,WAAU,WACdC,MAAM,mBAAmBC,MAAK,SAAAC,GAG5B,OAFAC,QAAQC,IAAI,SACZD,QAAQC,IAAIF,GACLA,EAASG,UACfJ,MAAK,SAAAK,GACNd,EAASP,EAAUsB,SAASD,IAC5BV,GAAY,GACZO,QAAQC,IAAInB,EAAUsB,SAASD,OAEjCN,MAAM,8FAA8FC,MAAK,SAAAC,GAGvG,OAFAC,QAAQC,IAAI,SACZD,QAAQC,IAAIF,GACLA,EAASG,UACfJ,MAAK,SAAAK,GACNZ,EAASY,GACTR,GAAY,GACZK,QAAQC,IAAInB,EAAUsB,SAASD,SAEhC,IAEI,8BACHX,GACAa,IAAMjB,GAER,8BACEM,GACAJ,IC5BcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.0292219e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport showdown from 'showdown'\nimport parse from 'html-react-parser';\n\nconst converter = new showdown.Converter()\n\nfunction App() {\n  const [data1, setData1] = React.useState(null)\n  const [data2, setData2] = React.useState(null)\n  const [loading1, setLoading1] = React.useState(true)\n  const [loading2, setLoading2] = React.useState(true)\n\n  React.useEffect(() => {\n    fetch('rule-example.md').then(response => {\n      console.log(\"DATA1\")\n      console.log(response)\n      return response.text()\n    }).then(data => {\n      setData1(converter.makeHtml(data))\n      setLoading1(false)\n      console.log(converter.makeHtml(data))\n    })\n    fetch('https://raw.githubusercontent.com/eslint/eslint/master/docs/rules/array-bracket-newline.md').then(response => {\n      console.log(\"DATA2\")\n      console.log(response)\n      return response.text()\n    }).then(data => {\n      setData2(data)\n      setLoading2(false)\n      console.log(converter.makeHtml(data))\n    })\n  }, [])\n\n  return <div>\n    {!loading1 && (\n      parse(data1)\n    )}\n    <hr />\n    {!loading2 && (\n      data2\n    )}\n  </div>\n\n}\n\nfunction App2() {\n  const valueRef = React.useRef(null)\n  const [view, setView] = React.useState('form')\n  const [loading, setLoading] = React.useState(true)\n  const [data, setData] = React.useState(null)\n  const [value, setValue] = React.useState(null)\n\n  const handleClick = e => {\n    setView('list')\n    setValue(JSON.parse(valueRef.current.value))\n  }\n\n  React.useEffect(() => {\n    fetch('rules.json').then(response => {\n      console.log(response)\n      return response.json()\n    }).then(data => {\n      setData(data)\n      setLoading(false)\n    })\n  }, [])\n\n  if(loading) return <div>Loading..</div>\n\n  return (\n    <div className=\"App\">\n      {view === 'form' && (\n        <div>\n          <textarea ref={valueRef} defaultValue={`{\n\"accessor-pairs\": \"off\"\n}`} rows=\"10\"/>\n          <button onClick={handleClick}>Check</button>\n        </div>\n      )}\n\n      {view === 'list' && (\n        <div className=\"section-list\">\n          <div className=\"painel-left\">\n          <ul>\n            {Object.keys(value).map(key => {\n              const item = value[key]\n              return <li key={key}>{key}</li>\n            })}\n            </ul>\n          </div>\n          <div className=\"painel-right\">\n            Here will be MD\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}